window.SIDEBAR_ITEMS = {"enum":[["RCmpOrdering","Ffi-safe equivalent of `std::cmp::Ordering`."],["RCow","Ffi-safe equivalent of `std::borrow::Cow`."],["ROption","Ffi-safe equivalent of the `std::option::Option` type."],["RResult","Ffi-safe equivalent of `Result<T, E>`."],["RSeekFrom","Ffi-safe equivalent of `std::io::SeekFrom`."]],"mod":[["cow","Contains the ffi-safe equivalent of `std::borrow::Cow`, and related items."],["map","Contains the ffi-safe equivalent of `std::collections::HashMap`, and related items."],["string","Contains an ffi-safe equivalent of `std::string::String`."],["sync","Some types from the `std::sync` module have ffi-safe equivalents in `abi_stable::external_types`."],["utypeid","An ffi-safe equivalent of `std::any::TypeId`."],["vec","Contains an ffi-safe equivalent of `Vec<T>`."]],"struct":[["RArc","Ffi-safe version of `std::sync::Arc`"],["RBox","Ffi-safe equivalent of `std::box::Box`."],["RBoxError_","Ffi-safe version of `Box<dyn std::error::Error + 'static>` whose `Send + Sync`ness is determined by the `M` type parameter."],["RDuration","Ffi-safe equivalent of `std::time::Duration` ."],["RHashMap","An ffi-safe hashmap, which wraps `std::collections::HashMap<K, V, S>`, only requiring the `K: Eq + Hash` bounds when constructing it."],["RIoError","Ffi safe equivalent to `std::io::Error`."],["RIoErrorKind","Ffi safe equivalent to `std::io::ErrorKind`."],["RSlice","Ffi-safe equivalent of `&'a [T]`"],["RSliceMut","Ffi-safe equivalent of `&'a mut [T]`"],["RStr","Ffi-safe equivalent of `&'a str`"],["RString","Ffi-safe equivalent of `std::string::String`."],["RVec","Ffi-safe equivalent of `std::vec::Vec`."],["Tuple1","An ffi safe 1 element tuple."],["Tuple2","An ffi safe 2 element tuple."],["Tuple3","An ffi safe 3 element tuple."],["Tuple4","An ffi safe 4 element tuple."],["UTypeId","An ffi-safe equivalent of `std::any::TypeId` that can compare types across dynamic libraries."]],"type":[["RBoxError","Ffi safe equivalent to `Box<dyn std::error::Error + Send + Sync>`."],["RCowSlice","Ffi-safe equivalent of `Cow<'a, [T]>`, either an [`RSlice`] or [`RVec`]."],["RCowStr","Ffi-safe equivalent of `Cow<'a, str>`, either an [`RStr`] or [`RString`]."],["RCowVal","Ffi-safe equivalent of `Cow<'a, T>`, either a `&T` or `T`."],["SendRBoxError","Ffi safe equivalent to `Box<dyn std::error::Error + Send>`."],["UnsyncRBoxError","Ffi safe equivalent to `Box<dyn std::error::Error>`."]]};