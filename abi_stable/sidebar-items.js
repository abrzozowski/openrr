window.SIDEBAR_ITEMS = {"attr":[["export_root_module","This attribute is used for functions which export a module in an `implementation crate`."],["sabi_extern_fn","The `sabi_extern_fn` attribute macro allows defining `extern \"C\"` function that abort on unwind instead of causing undefined behavior."],["sabi_trait","This attribute generates an ffi-safe trait object on the trait it’s applied to."]],"derive":[["GetStaticEquivalent","The `GetStaticEquivalent` macro derives the `GetStaticEquivalent_` trait."],["StableAbi","The StableAbi derive macro allows one to implement the `StableAbi trait` to :"]],"macro":[["RTuple","Use this macro to get the type of a `Tuple*` with the types passed to the macro."],["declare_root_module_statics","Implements the `RootModule::root_module_statics` associated function."],["extern_fn_panic_handling","Use this to make sure that you handle panics inside `extern fn` correctly."],["make_item_info","Constructs an `ItemInfo`, with information about the place where it’s called."],["nulstr","Constructs a `NulStr` from a string literal."],["nulstr_trunc","Constructs a `NulStr` from a string literal, truncating the string on internal nul bytes."],["package_version_strings","Instantiates a `VersionStrings` with the major.minor.patch version of the library where it is invoked."],["rslice","A macro to construct `RSlice`s."],["rstr","Constructs `RStr` constants from `&'static str` constants."],["rtry","Equivalent to `?` for `RResult`."],["rtry_opt","Equivalent to `?` for `ROption`."],["rtuple","Use this macro to construct a `abi_stable::std_types::Tuple*` with the values passed to the macro."],["rvec","Constructs an `RVec` using the same syntax that the `std::vec` macro uses."],["staticref","Allows declaring a `StaticRef` inherent associated `const`ant from possibly non-`'static` references."],["tag","Constructs a `Tag`, a dynamically typed value for users to check extra properties about their types when doing runtime type checking."],["tl_genparams","Can be used to construct `CompGenericParams`, when manually implementing `StableAbi`."]],"mod":[["abi_stability","types and traits related to abi stability."],["const_utils","Utilities for const contexts."],["docs","Additional docs for macros, and guides."],["erased_types","Types and traits related to type erasure."],["external_types","Ffi wrapper for types defined outside the standard library."],["for_examples","Types used in documentation examples."],["inline_storage","Contains the `InlineStorage` trait,and related items."],["library","Traits and types related to loading an abi_stable dynamic library, as well as functions/modules within."],["marker_type","Zero-sized types ."],["nonexhaustive_enum","Contains types and traits for nonexhaustive enums."],["pointer_trait","Traits for pointers."],["prefix_type","Types,traits,and functions used by prefix-types."],["reexports","Miscelaneous items re-exported from core_extensions."],["reflection","Types and submodules for doing runtime reflection."],["sabi_trait","Contains items related to the `#[sabi_trait]` attribute."],["sabi_types","ffi-safe types that aren’t wrappers for other types."],["std_types","Contains many ffi-safe equivalents of standard library types. The vast majority of them can be converted to and from std equivalents."],["traits","Where miscellaneous traits reside."],["type_layout","Types for modeling the layout of a datatype"],["type_level","Types used to represent values at compile-time, eg: True/False."],["utils","Utility functions."]],"static":[["LIB_HEADER","The header used to identify the version number of abi_stable that a dynamic libraries uses."]],"struct":[["DynTrait","DynTrait implements ffi-safe trait objects, for a selection of traits."]],"trait":[["InterfaceType","Defines the usable/required traits when creating a `DynTrait<Pointer<()>, ThisInterfaceType>`."],["StableAbi","Represents a type whose layout is stable."]]};