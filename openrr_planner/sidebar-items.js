window.SIDEBAR_ITEMS = {"enum":[["Error","Error for `openrr_planner`"]],"fn":[["create_chain_from_joint_names","Create a sub-chain of the collision check model by a name list"],["create_joint_path_planner",""],["generate_clamped_joint_positions_from_limits","Clamp joint angles to set angles safely"],["generate_random_joint_positions_from_limits","Generate random joint angles from the optional limits"],["get_reachable_region","Check the poses which can be reached by the robot arm"],["interpolate","Interpolate position vectors"],["modify_to_nearest_angle","If the joint has no limit, select the nearest value from (x + 2pi *)."],["set_clamped_joint_positions","Set joint positions safely"],["set_random_joint_positions","Set random joint angles"]],"mod":[["collision",""]],"struct":[["CollisionDetector","Collision detector"],["JacobianIkSolver","Inverse Kinematics Solver using Jacobian matrix"],["JointPathPlanner","Collision Avoidance Path Planner"],["JointPathPlannerBuilder","Builder pattern to create `JointPathPlanner`"],["JointPathPlannerConfig",""],["JointPathPlannerWithIk","Joint path planner which supports inverse kinematics"],["RandomInitializeIkSolver","Randomize initial joint angles before solving"],["SelfCollisionChecker",""],["SelfCollisionCheckerConfig",""],["TrajectoryPoint","Struct for a point of a trajectory with multiple dimensions."]],"trait":[["FromUrdf","Convert urdf object into openrr_planner/ncollide3d object"],["InverseKinematicsSolver","IK solver"]]};