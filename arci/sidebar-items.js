window.SIDEBAR_ITEMS = {"attr":[["async_trait",""]],"enum":[["Error",""],["JointPositionLimiterStrategy",""]],"fn":[["copy_joint_positions","To copy joint name and position between `from` and `to`"]],"mod":[["gamepad",""],["utils",""]],"struct":[["BaseVelocity",""],["DummyGamepad","Dummy Gamepad for debug or tests."],["DummyJointTrajectoryClient","Dummy JointTrajectoryClient for debug or tests."],["DummyLocalization","Dummy Localization for debug or tests."],["DummyMotorDriveEffort",""],["DummyMotorDrivePosition",""],["DummyMotorDriveVelocity",""],["DummyMoveBase","Dummy MoveBase for debug or tests."],["DummyNavigation","Dummy Navigation for debug or tests."],["DummySpeaker","Dummy Speaker for debug or tests."],["DummyTransformResolver","Dummy TransformResolver for debug or tests."],["EachJointDiffCondition",""],["JointPositionDifferenceLimiter","JointPositionDifferenceLimiter limits the difference of position between trajectory points and trajectory points are interpolated linearly to satisfy the limits in JointTrajectoryClient::send_joint_positions. In send_joint_trajectory, if no velocities is specified or zero velocities is specified at the last point, trajectory points are interpolated, otherwise simply input trajectory is forwarded to client."],["JointPositionLimit",""],["JointPositionLimiter",""],["JointTrajectoryClientsContainer",""],["JointVelocityLimiter","JointVelocityLimiter limits the duration to make all joints velocities lower than the given velocities limits at each TrajectoryPoint."],["Lazy",""],["PartialJointTrajectoryClient",""],["Scan2D",""],["TotalJointDiffCondition",""],["TrajectoryPoint",""],["WaitFuture","Waits until the underlying future is complete."]],"trait":[["CompleteCondition",""],["Gamepad",""],["JointTrajectoryClient",""],["LaserScan2D",""],["Localization",""],["MotorDriveEffort",""],["MotorDrivePosition",""],["MotorDriveVelocity",""],["MoveBase",""],["Navigation",""],["SetCompleteCondition",""],["Speaker",""],["TransformResolver",""]],"type":[["Isometry2","A 2-dimensional direct isometry using a unit complex number for its rotational part."],["Isometry3","A 3-dimensional direct isometry using a unit quaternion for its rotational part."],["UnitQuaternion","A unit quaternions. May be used to represent a rotation."],["Vector2","A stack-allocated, 2-dimensional column vector."],["Vector3","A stack-allocated, 3-dimensional column vector."]]};